// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = "postgres://prisma:prisma@localhost:5432"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

model User {
  id            String          @id
  email         String          @unique
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  point         Float           @default(0)
  name          String?
  providers     String
  username      String?         @unique
  userState     userState       @default(ACTIVE)
  photoURL      String?
  website       String?
  bio           String?
  userWithdrawRecorder UserWithdrawRecorder[]
  userPaymentMethod UserPaymentMethod[]
  project       Project[]
  projectTransactionRecorderSender ProjectTransactionRecorder[] @relation("SenderUser")
  projectTransactionRecorderReceiver ProjectTransactionRecorder[] @relation("ReceiverUser")
  media         Media[]
  userDepositRecorder UserDepositRecorder[]
}
model AvailableDepositMethod {
  id                   String          @id
  provider             WithdrawProvider 
  ewalletProvider      String?
  bankProvider         String?
   createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @default(now())
    name                String?
  phone               String?
  stk                 String?
  userDepositRecorder UserDepositRecorder[]
}
model AvailablePaymentMethod {
  id                   String          @id
  provider             WithdrawProvider
  ewalletProvider      String?
  bankProvider         String?
  paymentMethod        UserPaymentMethod[]
}
model UserPaymentMethod {
  id                  String                 @id @default(cuid())
  userPaymentMethod   AvailablePaymentMethod @relation(fields: [userPaymentMethodId], references: [id])
  userPaymentMethodId String
   createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @default(now())
  paymentState  PaymentState @default(LIVE)
  name                String?
  phone               String?
  stk                 String?
  user                User @relation(fields: [userId], references: [id])
  userWithdrawRecorder UserWithdrawRecorder[]
  userId   String
}

model UserDepositRecorder {
  id String                 @id @default(cuid())
   createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  amount Float
  user  User     @relation(fields: [userId], references: [id])
  userId String
  availableDepositMethod AvailableDepositMethod? @relation(fields: [availableDepositMethodId], references: [id])
  availableDepositMethodId String?
  momoTransaction MomoTransaction[] @relation(fields: [momoTransactionId], references: [id])
  momoTransactionId String?
}
model UserWithdrawRecorder {
  id String                 @id @default(cuid())
   createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  amount Float
  description String?
  user User @relation(fields: [userId], references: [id])
  userId String
  withdrawPointState WithdrawPointState @default(PAYING)
  userPaymentMethod UserPaymentMethod @relation(fields: [userPaymentMethodId], references: [id])
  userPaymentMethodId String
  momoTransaction MomoTransaction? @relation(fields: [momoTransactionId], references: [id])
  momoTransactionId String?
}
model Project {
  id              String                   @id @default(cuid())
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @default(now())
  status          Status                   @default(PENDING)
  complete        isComplete               @default(UNCOMPLETE)
  caroselImage    Json[]
  slug            String                   @unique
  projectName     String
  price           Float
  maxUnit         Int
  openDay         DateTime
  closeDay        DateTime
  description     String @default("")
  usedFor         String
  requirements    String
  contact         String
  media           Media[]
  author          User                     @relation(fields: [authorId], references: [id])
  authorId        String
  authorName      String
  projectTransactionRecorder ProjectTransactionRecorder[]
}
model MomoTransaction {
  id String @id 
  transactionId String @unique
  createdAt       DateTime                 @default(now())
  data Json
  userWithdrawRecorder UserWithdrawRecorder[]
  userDepositRecorder UserDepositRecorder[]
}
model ProjectTransactionRecorder {
  id String @id 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  senderUser          User                     @relation("SenderUser",fields: [senderUserId], references: [id])
  senderUserId String
   receiverUser          User                     @relation(name: "ReceiverUser",fields: [receiverUserId], references: [id])
  receiverUserId String
  sumAmount Float
  project Project @relation(fields: [projectId], references: [id])
  projectId String
  media Media[] 
}

model Media {
  id        String    @id @default(cuid())
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  isApprove isApprove @default(PENDING)
  paidState    Boolean   @default(false)
  paidDate  DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
  ProjectTransactionRecorder ProjectTransactionRecorder? @relation(fields: [projectTransactionRecorderId],references: [id])
  projectTransactionRecorderId String?
}

enum Role {
  USER
  ADMIN
}

enum userState {
  ACTIVE
  SUSPENDED
  BANNED
}
enum PaymentState {
  LIVE
  DELETED
}

enum Status {
  PENDING
  PUBLISHED
  DELETED
}
enum WithdrawProvider {
  EWALLET
  BANK
}
enum WithdrawPointState {
  REJECT
  PAYING
  PAID
}
enum isComplete {
  COMPLETED
  PAUSE
  STOP
  UNCOMPLETE
}

enum isApprove {
  PENDING
  REJECT
  APPROVE
}
